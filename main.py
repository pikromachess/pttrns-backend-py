import os
import sys
import logging
import jwt
import time
import hashlib
from fastapi import FastAPI, HTTPException, Request, Depends, Header
from fastapi.responses import StreamingResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import uvicorn
import asyncio
import aiohttp
from contextlib import asynccontextmanager
from typing import Dict, Any, Iterator, Optional
from io import BytesIO
import json
import secrets
import hashlib
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Timeweb Cloud
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
def safe_import():
    try:
        from database import db_manager
        logger.info("‚úÖ Database –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return db_manager
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Database –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

def safe_import_audio():
    try:
        from audio_downloader import audio_downloader
        from music_generator import streaming_music_generator
        logger.info("‚úÖ Audio –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return audio_downloader, streaming_music_generator
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Audio –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return None, None

def safe_import_config():
    try:
        from config import server_config
        logger.info("‚úÖ Config –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return server_config
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Config –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        class FallbackConfig:
            host = os.getenv("HOST", "0.0.0.0")
            port = int(os.getenv("PORT", "8000"))
            debug = os.getenv("DEBUG", "false").lower() == "true"
        return FallbackConfig()

def safe_import_validator():
    try:
        from input_validator import InputValidator
        logger.info("‚úÖ Validator –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return InputValidator()
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Validator –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
db_manager = safe_import()
audio_downloader, streaming_music_generator = safe_import_audio()
server_config = safe_import_config()
validator = safe_import_validator()

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NODE_SERVER_URL = os.getenv("NODE_SERVER_URL", "http://localhost:3000")
BACKEND_SECRET = os.getenv("BACKEND_SECRET", "MY_SECRET_FROM_ENV")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
security = HTTPBearer()

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
ALLOWED_ORIGINS = [
    "https://pikromachess-pttrns-frontend-dc0f.twc1.net"
]

if os.getenv("ENVIRONMENT", "development") == "development":
    ALLOWED_ORIGINS.extend([
        "http://localhost:3000",
        "http://localhost:5173"
    ])

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π rate limiter –¥–ª—è —Å–µ—Å—Å–∏–π
class SessionRateLimiter:
    def __init__(self):
        self.requests = {}
    
    def check_session_limit(self, user_address: str, max_requests: int = 10, window: int = 60) -> bool:
        current_time = time.time()
        
        if user_address not in self.requests:
            self.requests[user_address] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_address] = [
            req_time for req_time in self.requests[user_address] 
            if current_time - req_time < window
        ]
        
        if len(self.requests[user_address]) >= max_requests:
            return False
        
        self.requests[user_address].append(current_time)
        return True

session_rate_limiter = SessionRateLimiter()

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async def verify_session_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    token = credentials.credentials
    
    try:
        logger.info(f"üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token[:20]}...")
        payload = jwt.decode(token, BACKEND_SECRET, algorithms=["HS256"])
        logger.info(f"üìã Payload —Ç–æ–∫–µ–Ω–∞: {payload}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
        token_type = payload.get("type")
        if token_type != "listening_session":
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_type}")
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º exp –∏–∑ JWT
        current_time = int(time.time())
        exp_time = payload.get("exp", 0)
        
        if current_time > exp_time:
            logger.warning(f"‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: current={current_time}, exp={exp_time}")
            raise HTTPException(status_code=401, detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        
        user_address = payload.get("address")
        if not user_address:
            logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å –≤ —Ç–æ–∫–µ–Ω–µ")
            raise HTTPException(status_code=401, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not session_rate_limiter.check_session_limit(user_address):
            logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_address}")
            raise HTTPException(status_code=429, detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞: {user_address}")
        
        return {
            "address": user_address,
            "domain": payload.get("domain"),
            "timestamp": payload.get("timestamp", payload.get("iat", current_time)),
            "exp": exp_time,
            "valid": True
        }
        
    except jwt.ExpiredSignatureError:
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (ExpiredSignatureError)")
        raise HTTPException(status_code=401, detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
    except jwt.InvalidTokenError as e:
        logger.warning(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=401, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞")

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
def validate_music_request(data: dict) -> dict:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Request must be a JSON object")
    
    metadata = data.get("metadata", {})
    if not isinstance(metadata, dict):
        raise HTTPException(status_code=400, detail="Metadata must be an object")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not metadata.get("name"):
        raise HTTPException(status_code=400, detail="Name is required in metadata")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å validator, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if validator:
        try:
            validation_result = validator.validate_nft_metadata(metadata)
            if not validation_result["is_valid"]:
                raise HTTPException(status_code=400, detail=validation_result["error"])
            data["metadata"] = validation_result["sanitized"]
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    return data

# Lifespan —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if db_manager:
        try:
            await db_manager.create_pool()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    logger.info("üéµ NFT Music Generator API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    yield
    
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
    
    if db_manager:
        try:
            await db_manager.close_pool()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="NFT Music Generator API",
    description="API –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –∏–∑ NFT –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏",
    version="2.1.0",
    lifespan=lifespan,
    docs_url="/docs" if server_config.debug else None,
    redoc_url="/redoc" if server_config.debug else None,
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {
        "message": "NFT Streaming Music Generator API",
        "status": "running",
        "version": "2.1.0",
        "authentication": "session-based",
        "platform": "Timeweb Cloud",
        "streaming": True,
        "format": "WAV",
        "port": server_config.port
    }

@app.get("/health")
async def health_check():
    db_status = "not_available"
    if db_manager:
        try:
            samples = await db_manager.fetch_samples()
            db_status = "connected" if samples else "no_data"
        except Exception:
            db_status = "error"
    
    return {
        "status": "healthy",
        "database": db_status,
        "streaming_enabled": True,
        "session_auth": True,
        "timestamp": time.time(),
        "port": server_config.port
    }

@app.post("/generate-music-stream")
async def generate_music_stream_endpoint(
    request: Request,
    session_data: dict = Depends(verify_session_token)
):
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        request_data = await request.json()
        validated_data = validate_music_request(request_data)
        
        user_address = session_data["address"]
        logger.info(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_address}")
        logger.info(f"üìù NFT: {validated_data['metadata'].get('name', 'Unknown')}")
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª–Ω—ã–µ –º–æ–¥—É–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if streaming_music_generator and audio_downloader and db_manager:
            try:
                logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ç–º–ø–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                samples = await db_manager.fetch_samples()
                
                if not samples:
                    logger.warning("‚ö†Ô∏è –°—ç–º–ø–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    raise HTTPException(status_code=503, detail="–°—ç–º–ø–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                logger.info("üì¶ –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è NFT...")
                file_info = await audio_downloader.download_nft_audio_files(
                    validated_data["metadata"], samples
                )
                
                if file_info:
                    logger.info("üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –∏–∑ —Å—ç–º–ø–ª–æ–≤...")
                    return StreamingResponse(
                        streaming_music_generator.generate_music_stream(
                            validated_data["metadata"], file_info
                        ),
                        media_type="audio/wav",
                        headers={
                            "Content-Disposition": "inline; filename=nft_music.wav",
                            "Cache-Control": "no-cache",
                            "X-Generated-For": hashlib.sha256(user_address.encode()).hexdigest()[:8],
                        }
                    )
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã")
                    raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {str(e)}")
        else:
            logger.error("‚ùå –ú–æ–¥—É–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            raise HTTPException(status_code=503, detail="–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏")

@app.get("/samples")
async def get_samples(session_data: dict = Depends(verify_session_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    if not db_manager:
        return {"count": 0, "samples": [], "status": "database_not_available"}
    
    try:
        samples = await db_manager.fetch_samples()
        user_address = session_data["address"]
        
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_address} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å—ç–º–ø–ª–æ–≤")
        
        return {
            "count": len(samples), 
            "samples": samples,
            "user": hashlib.sha256(user_address.encode()).hexdigest()[:8]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ç–º–ø–ª–æ–≤: {e}")
        return {"count": 0, "samples": [], "error": str(e)}

@app.get("/session/info")
async def get_session_info(session_data: dict = Depends(verify_session_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    current_time = int(time.time())
    expires_in = max(0, session_data["exp"] - current_time)
    
    return {
        "user": hashlib.sha256(session_data["address"].encode()).hexdigest()[:8],
        "domain": session_data["domain"],
        "timestamp": session_data["timestamp"],
        "expires_in": expires_in,
        "expires_at": session_data["exp"],
        "valid": True
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return JSONResponse(
        status_code=404,
        content={"detail": "Endpoint not found", "available_endpoints": ["/", "/health", "/generate-music-stream", "/samples", "/session/info"]}
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@app.exception_handler(401)
async def auth_error_handler(request: Request, exc):
    return JSONResponse(
        status_code=401,
        content={
            "detail": "Authentication required", 
            "info": "Obtain session token from main backend /api/session/create"
        }
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {server_config.host}:{server_config.port}")
    logger.info(f"üîó Node.js —Å–µ—Ä–≤–µ—Ä: {NODE_SERVER_URL}")
    logger.info("üîê –†–µ–∂–∏–º: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏")
    logger.info("üéµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    port = server_config.port
    if port <= 0 or port > 65535:
        port = 8000
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º {port}")
    
    uvicorn.run(
        "main:app",
        host=server_config.host,
        port=port,
        reload=False,
        log_level="info",
        access_log=True
    )

if __name__ == "__main__":
    main()