import os
import sys
import logging
from fastapi import FastAPI, HTTPException, Request, Depends, Header
from fastapi.responses import StreamingResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import APIKeyHeader
import uvicorn
import asyncio
import aiohttp
from contextlib import asynccontextmanager
from typing import Dict, Any, Iterator, Optional
from io import BytesIO
import json
import secrets
import hashlib
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Timeweb Cloud
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
def safe_import():
    try:
        from database import db_manager
        logger.info("‚úÖ Database –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return db_manager
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Database –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

def safe_import_audio():
    try:
        from audio_downloader import audio_downloader
        from music_generator import streaming_music_generator
        logger.info("‚úÖ Audio –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return audio_downloader, streaming_music_generator
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Audio –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return None, None

def safe_import_config():
    try:
        from config import server_config
        logger.info("‚úÖ Config –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return server_config
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Config –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        class FallbackConfig:
            host = os.getenv("HOST", "0.0.0.0")
            port = int(os.getenv("PORT", "8000"))
            debug = os.getenv("DEBUG", "false").lower() == "true"
        return FallbackConfig()

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
db_manager = safe_import()
audio_downloader, streaming_music_generator = safe_import_audio()
server_config = safe_import_config()

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NODE_SERVER_URL = os.getenv("NODE_SERVER_URL", "http://localhost:3000")
API_KEY = os.getenv("API_KEY", "your-secret-key")
api_key_header = APIKeyHeader(name="X-API-Key", auto_error=False)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
ALLOWED_ORIGINS = [
    "https://pikromachess-pttrns-frontend-dc0f.twc1.net"
]

if os.getenv("ENVIRONMENT", "development") == "development":
    ALLOWED_ORIGINS.extend([
        "http://localhost:3000",
        "http://localhost:5173"
    ])

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π rate limiter –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class SimpleRateLimiter:
    def __init__(self):
        self.requests = {}
    
    def check_limit(self, client_ip: str, max_requests: int = 5, window: int = 60) -> bool:
        current_time = time.time()
        
        if client_ip not in self.requests:
            self.requests[client_ip] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[client_ip] = [
            req_time for req_time in self.requests[client_ip] 
            if current_time - req_time < window
        ]
        
        if len(self.requests[client_ip]) >= max_requests:
            return False
        
        self.requests[client_ip].append(current_time)
        return True

rate_limiter = SimpleRateLimiter()

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
def validate_nft_request_simple(data: dict) -> dict:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π"""
    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Request must be a JSON object")
    
    metadata = data.get("metadata", {})
    if not isinstance(metadata, dict):
        raise HTTPException(status_code=400, detail="Metadata must be an object")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not metadata.get("name"):
        raise HTTPException(status_code=400, detail="Name is required")
    
    return data

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
async def verify_music_api_key_simple(x_music_api_key: Optional[str] = Header(None)):
    if not x_music_api_key:
        raise HTTPException(status_code=401, detail="API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if len(x_music_api_key) < 10:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á")
    
    return {"address": "validated_user", "valid": True}

# Lifespan —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Timeweb Cloud...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if db_manager:
        try:
            await db_manager.create_pool()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    logger.info("üéµ NFT Music Generator API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    yield
    
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
    
    if db_manager:
        try:
            await db_manager.close_pool()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="NFT Music Generator API",
    description="API –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –∏–∑ NFT –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
    version="2.0.0",
    lifespan=lifespan,
    docs_url="/docs" if server_config.debug else None,
    redoc_url="/redoc" if server_config.debug else None,
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {
        "message": "NFT Streaming Music Generator API",
        "status": "running",
        "version": "2.0.0",
        "platform": "Timeweb Cloud",
        "streaming": True,
        "format": "WAV",
        "port": server_config.port
    }

@app.get("/health")
async def health_check():
    db_status = "not_available"
    if db_manager:
        try:
            samples = await db_manager.fetch_samples()
            db_status = "connected" if samples else "no_data"
        except Exception:
            db_status = "error"
    
    return {
        "status": "healthy",
        "database": db_status,
        "streaming_enabled": True,
        "timestamp": time.time(),
        "port": server_config.port
    }

@app.post("/generate-music-stream")
async def generate_music_stream_endpoint(
    request: Request,
    auth_data: dict = Depends(verify_music_api_key_simple)
):
    try:
        # Rate limiting
        client_ip = request.client.host if request.client else "unknown"
        if not rate_limiter.check_limit(client_ip):
            raise HTTPException(status_code=429, detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        request_data = await request.json()
        validated_data = validate_nft_request_simple(request_data)
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {auth_data.get('address', 'unknown')}")
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª–Ω—ã–µ –º–æ–¥—É–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if streaming_music_generator and audio_downloader and db_manager:
            try:
                samples = await db_manager.fetch_samples()
                file_info = await audio_downloader.download_nft_audio_files(
                    validated_data["metadata"], samples
                )
                
                if file_info:
                    return StreamingResponse(
                        streaming_music_generator.generate_music_stream(
                            validated_data["metadata"], file_info
                        ),
                        media_type="audio/wav",
                        headers={
                            "Content-Disposition": "inline; filename=nft_music.wav",
                            "Cache-Control": "no-cache",
                        }
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏")
        return StreamingResponse(
            generate_simple_audio_stream(),
            media_type="audio/wav",
            headers={
                "Content-Disposition": "inline; filename=test_audio.wav",
                "Cache-Control": "no-cache",
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏")

@app.get("/samples")
async def get_samples():
    if not db_manager:
        return {"count": 0, "samples": [], "status": "database_not_available"}
    
    try:
        samples = await db_manager.fetch_samples()
        return {"count": len(samples), "samples": samples}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ç–º–ø–ª–æ–≤: {e}")
        return {"count": 0, "samples": [], "error": str(e)}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return JSONResponse(
        status_code=404,
        content={"detail": "Endpoint not found"}
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {server_config.host}:{server_config.port}")
    logger.info(f"üîó Node.js —Å–µ—Ä–≤–µ—Ä: {NODE_SERVER_URL}")
    logger.info("üéµ –†–µ–∂–∏–º: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    port = server_config.port
    if port <= 0 or port > 65535:
        port = 8000
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º {port}")
    
    uvicorn.run(
        "main:app",
        host=server_config.host,
        port=port,
        reload=False,
        log_level="info",
        access_log=True
    )

if __name__ == "__main__":
    main()